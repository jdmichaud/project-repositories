.\"	$NetBSD: 21sh.1,v 1.33.4.3 2000/09/21 21:32:35 phil Exp $
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Kenneth Almquist.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)21sh.1	8.6 (Epita) 1/1/02
.\"
.Dd December 31, 2001
.Os
.Dt 21SH 1
.Sh NAME
21sh \- command interpreter (shell)
.Sh SYNOPSIS
.Nm 21sh
.Bk -words
.Ek
.Sh DESCRIPTION
21Sh is a standard command interpreter for the system. The current version
of
.Nm
is NOT in the process of being changed to conform with the
.Tn POSIX
1003.2 and 1003.2a specifications for the shell.  This version has many
features which make it appear not similar in some respects to the Korn shell,
but it is not a Korn shell clone (see
.Xr ksh 1 ) .
Only features designated by
.Tn POSIX ,
plus a few Berkeley extensions, are being incorporated into this shell.
We expect
.Tn POSIX
conformance by the time 4.4 BSD is released (lol). 
This man page is not intended
to be a tutorial or a complete specification of the shell.
.Ss Overview
The shell is a command that reads lines from either a file or the
terminal, interprets them, and generally executes other commands. It is
the program that is running when a user logs into the system (although a
user can select a different shell with the
.Xr chsh 1
command). The shell implements a language that has flow control
constructs, a macro facility that provides a variety of features in
addition to data storage, along with built in history and line editing
capabilities.  It incorporates many features to aid interactive use and
has the advantage that the interpretative language is common to both
interactive and non-interactive use (shell scripts).  That is, commands
can be typed directly to the running shell or can be put into a file and
the file can be executed directly by the shell.
.Ss Invocation
Just launch 21sh =)
.Ss Lexical Structure
The shell reads input in terms of lines from a file and breaks it up into
words at whitespace (blanks and tabs), and at certain sequences of
characters that are special to the shell called
.Dq operators .
There are two types of operators: control operators and redirection
operators (their meaning is discussed later). Following is a list of operators:
.Bl -ohang -offset indent
.It "Control operators:"
.Dl &  &&  ; | || <newline>
.It "Redirection operator:"
.Dl <  > <<  >>
.El
.Ss Quoting
Quoting is used to remove the special meaning of certain characters or
words to the shell, such as operators, whitespace, or keywords.  There are
three types of quoting: matched single quotes, matched double quotes, and
backslash.
.Ss Backslash
A backslash preserves the literal meaning of the following
character, with the exception of
.Aq newline .
A backslash preceding a
.Aq newline
is treated as a line continuation.
.Ss Single Quotes
Enclosing characters in single quotes preserves the literal meaning of all
the characters (except single quotes, making it impossible to put
single-quotes in a single-quoted string).
.Ss Double Quotes
Enclosing characters within double quotes preserves the literal
meaning of all characters except dollarsign
.Pq $ ,
backquote
.Pq ` ,
and backslash
.Pq \e .
The backslash inside double quotes is historically weird, and serves to
quote only the following characters:
.Dl $  `  \*q  \e  <newline> .
Otherwise it remains literal.
.Ss Commands
The shell interprets the words it reads according to a language, the
specification of which is outside the scope of this man page (refer to the
BNF in the
.Tn POSIX
1003.2 document).  Essentially though, a line is read and if the first
word of the line (or after a control operator) is not a reserved word,
then the shell has recognized a simple command.  Otherwise, a complex
command or some other special construct may have been recognized.
.Ss Simple Commands
If a simple command has been recognized, the shell performs
the following actions:
.Bl -enum -offset indent
.It
Leading words of the form
.Dq name=value
are stripped off and assigned to the environment of the simple command.
Redirection operators and their arguments (as described below) are
stripped off and saved for processing.
.It
The remaining words are expanded as described in
the section called
.Dq Expansions ,
and the first remaining word is considered the command name and the
command is located.  The remaining words are considered the arguments of
the command. If no command name resulted, then the
.Dq name=value
variable assignments recognized in item 1 affect the current shell.
.It
Redirections are performed as described in the next section.
.El
.Ss Redirections
Redirections are used to change where a command reads its input or sends
its output.  In general, redirections open, close, or duplicate an
existing reference to a file.  The overall format used for redirection is:
.Pp
.Dl Va redir-op Ar file
.Pp
where
.Va redir-op
is one of the redirection operators mentioned previously.  Following is a
list of the possible redirections.
.Bl -tag -width aaabsfiles -offset indent
.It Ns > file
Redirect standard output to file.
.It Ns >> file
Append standard output to file.
.It Ns < file
Redirect standard input from file.
.It Ns 2> file
Redirect error output to file.
.El
.Pp
.Pp
.Ss Search and Execution
There are three types of commands: builtin commands, and
normal programs -- and the command is searched for (by name) in that
order.  They each are executed in a different way.
.Pp
Shell builtins are executed internally to the shell, without spawning a
new process.
.Pp
Otherwise, if the command name doesn't match a function or builtin, the
command is searched for as a normal program in the filesystem (as
described in the next section). When a normal program is executed, the
shell runs the program, passing the arguments and the environment to the
program. If the program is not a normal executable file (i.e., if it does
not begin with the "magic number" whose
.Tn ASCII
representation is "#!", so
.Xr execve 2
returns
.Er ENOEXEC
then) the shell will interpret the program in a subshell.  The child shell
will reinitialize itself in this case, so that the effect will be as if a
new shell had been invoked to handle the ad-hoc shell script, except that
the location of hashed commands located in the parent shell will be
remembered by the child.
.Pp
Note that previous versions of this document and the source code itself
misleadingly and sporadically refer to a shell script without a magic
number as a "shell procedure".
.Ss Path Search
.Pp
When locating a command, the shell first looks to see if it has a builtin 
command by that name.
If a builtin command is not found, one of two things happen:
.Bl -enum
.It
Command names containing a slash are simply executed without performing
any searches.
.It
The shell searches each entry in
.Ev PATH
in turn for the command. The value of the
.Ev PATH
variable should be a series of entries separated by colons.  Each entry
consists of a directory name. The current directory may be indicated
implicitly by an empty directory name, or explicitly by a single period.
.El
.Ss Command Exit Status
Each command has an exit status that can influence the behavior
of other shell commands.  The paradigm is that a command exits
with zero for normal or success, and non-zero for failure,
error, or a false indication.  The man page for each command
should indicate the various exit codes and what they mean.
Additionally, the builtin commands return exit codes, as does
an executed shell function.
.Ss Complex Commands
Complex commands are combinations of simple commands with control
operators or reserved words, together creating a larger complex command.
More generally, a command is one of the following:
.Bl -bullet
.It
simple command
.It
pipeline
.It
list or compound-list
.It
compound command
.El
.Pp
Unless otherwise stated, the exit status of a command is that of the last
simple command executed by the command.
.Ss Pipelines
.Pp
A pipeline is a sequence of one or more commands separated
by the control operator |.  The standard output of all but
the last command is connected to the standard input
of the next command.  The standard output of the last
command is inherited from the shell, as usual.
.Pp
The format for a pipeline is:
.Pp
.Dl command1 [ | command2 ...]
.Pp
The standard output of command1 is connected to the standard input of
command2. The standard input, standard output, or both of a command is
considered to be assigned by the pipeline before any redirection specified
by redirection operators that are part of the command.
.Pp
If the pipeline is not in the background (discussed later), the shell
waits for all commands to complete.
.Pp
A ; or <newline> terminator causes the preceding AND-OR-list (described
next) to be executed sequentially; a & causes asynchronous execution of
the preceding AND-OR-list.
.Pp
Note that unlike some other shells, each process in the pipeline is a
child of the invoking shell (unless it is a shell builtin, in which case
it executes in the current shell -- but any effect it has on the
environment is wiped).
.Ss Background Commands -- &
If a command is terminated by the control operator ampersand (&), the
shell executes the command asynchronously -- that is, the shell does not
wait for the command to finish before executing the next command.
.Pp
The format for running a command in background is:
.Pp
.Dl command1 & [command2 & ...]
.Pp
If the shell is not interactive, the standard input of an asynchronous
command is set to
.Pa /dev/null .
.Ss Lists -- Generally Speaking
A list is a sequence of zero or more commands separated by newlines,
semicolons, or ampersands, and optionally terminated by one of these three
characters. The commands in a list are executed in the order they are
written. If command is followed by an ampersand, the shell starts the
command and immediately proceed onto the next command; otherwise it waits
for the command to terminate before proceeding to the next one.
.Ss Short-Circuit List Operators
.Dq &&
and
.Dq ||
are AND-OR list operators.
.Dq &&
executes the first command, and then executes the second command iff the
exit status of the first command is zero.
.Dq ||
is similar, but executes the second command iff the exit status of the first
command is nonzero.
.Dq &&
and
.Dq ||
both have the same priority.
{ echo -n \*q hello \*q ; echo \*q world" } > greeting
.Pp
.Ss Variables and Parameters
The shell maintains a set of parameters.  A parameter denoted by a name is
called a variable. When starting up, the shell turns all the environment
variables into shell variables.  New variables can be set using the form
.Pp
.Dl name=value
.Pp
Variables set by the user must have a name consisting solely of
alphabetics, numerics, and underscores - the first of which must not be
numeric.  A parameter can also be denoted by a number or a special
character as explained below.
.Ss Special Parameters
A special parameter is a parameter denoted by one of the following special
characters.  The value of the parameter is listed next to its character.
Expands to the positional parameters, starting from one.  When the
expansion occurs within a double-quoted string it expands to a single
field with the value of each parameter separated by the first character of
the
.Ev IFS
variable, or by a <space> if
.Ev IFS
is unset.
.Ss Word expansion
.Ss Command Substitution
Command substitution allows the output of a command to be substituted in
place of the command name itself.  Command substitution occurs when
the command is enclosed as follows:
.Pp
.Dl $(command)
.Pp
or
.Po
.Dq backquoted
version
.Pc :
.Pp
.Dl `command`
.Pp
The shell expands the command substitution by executing command in a
subshell environment and replacing the command substitution with the
standard output of the command, removing sequences of one or more
<newline>s at the end of the substitution.  (Embedded <newline>s before
the end of the output are not removed; however, during field splitting,
they may be translated into <space>s, depending on the value of
.Ev IFS
and quoting that is in effect.)
These characters lose their special meanings if they are quoted.  When
command or variable substitution is performed and the dollar sign or back
quotes are not double quoted, the value of the variable or the output of
the command is scanned for these characters and they are turned into
meta-characters.
.Pp
An asterisk
.Pq Dq *
matches any string of characters.  A question mark matches any single
character. A left bracket
.Pq Dq \&[
introduces a character class.  The end of
the character class is indicated by a
.Pq Dq \&] ;
if the
.Dq \&]
is missing then the
.Dq \&[
matches a
.Dq \&[
rather than introducing a character class.  A character class matches any
of the characters between the square brackets.  A range of characters may
be specified using a minus sign. The character class may be complemented
by making an exclamation point the first character of the character class.
.Pp
To include a
.Dq \&]
in a character class, make it the first character listed (after the
.Dq \&! ,
if any).  To include a minus sign, make it the first or last character listed
.Ss Builtins
.Pp
This section lists the builtin commands which are builtin because they
need to perform some operation that can't be performed by a separate
process. In addition to these, there are several other commands that may
be builtin for efficiency (e.g.
.Xr echo 1 ,
etc).
.Bl -tag -width 5n
The commands in the specified file are read and executed by the shell.
.It bg
Continue the specified jobs (or the current job if no
jobs are given) in the background.
.It command Ar command Ar arg...
Execute the specified builtin command.  (This is useful when you
have a shell function with the same name as a builtin command.)
.It cd Op Ar directory
Switch to the specified directory (default
.Ev NIET ) .
If an entry for
.Ic cd
command will print out the name of the
directory that it actually switched to if this is different from the name
that the user gave.
.It exit
Terminate the shell process. Returning 0.
.It export Ar name...
The specified names are exported so that they will appear in the
environment of subsequent commands. The only way to un-export a variable
is to unset it. The shell allows the value of a variable to be set at the
same time it is exported by writing
.Pp
.Dl export name=value
.Pp
With no arguments the export command lists the names of all exported variables.
With the
.Fl p
option specified the output will be formatted suitably for non-interactive use.
when listing with -l.
.It fg
Move the current job which have been suspended to the foreground.
.It jobs
This command lists out all the background processes
which are children of the current shell process.
.El
.Sh ENVIRONMENT
.Bl -tag -width MAILCHECK
.It Ev HOME
Set automaticly by
.Xr login 1
from the user's login directory in the password file
.Pq Xr passwd 4 .
This environment variable also functions as the default argument for the
cd builtin.
.It Ev PATH
The default search path for executables.  See the above section
.Sx Path Search .
.El
.Sh FILES
Not as I could see
.Sh SEE ALSO
.Xr csh 1 ,
.Xr getopt 1 ,
.Xr ksh 1 ,
.Xr login 1 ,
.Xr test 1 ,
.Xr getopt 3 ,
.Xr passwd 4 ,
.Xr profile 4 ,
.Xr environ 5
.Xr sysctl 8
.Sh HISTORY
A
.Nm
command appeared in... can't remember...
It was, however, unmaintainable so we wrote this one.
.Sh EXIT STATUS
The only way to quit is by using the exit command so it returns 0.
.Sh BUGS
Setuid shell scripts should be avoided at all costs, as they are a
significant security risk. Also we know that our shell is plenty of bug,
but it's just a school project and we are sure that our school teacher will 
be enough fair with us ;)
